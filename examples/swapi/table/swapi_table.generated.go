// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package table

import (
	"context"

	"github.com/lumina-tech/gooq/examples/swapi/model"
	"github.com/lumina-tech/gooq/pkg/gooq"
	"gopkg.in/guregu/null.v3"
)

type colorReferenceTableConstraints struct {
	ColorReferenceTablePkey gooq.DatabaseConstraint
}

type colorReferenceTable struct {
	gooq.TableImpl
	Asterisk gooq.StringField
	Value    gooq.StringField

	Constraints *colorReferenceTableConstraints
}

func newColorReferenceTableConstraints(
	instance *colorReferenceTable,
) *colorReferenceTableConstraints {
	constraints := &colorReferenceTableConstraints{}
	constraints.ColorReferenceTablePkey = gooq.DatabaseConstraint{
		Name: "color_reference_table_pkey",
		Columns: []gooq.Field{
			instance.Value},
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newColorReferenceTable() *colorReferenceTable {
	instance := &colorReferenceTable{}
	instance.Initialize("public", "color_reference_table")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.Value = gooq.NewStringField(instance, "value")
	instance.Constraints = newColorReferenceTableConstraints(instance)
	return instance
}

func (t *colorReferenceTable) As(alias string) *colorReferenceTable {
	instance := newColorReferenceTable()
	instance.TableImpl = *instance.TableImpl.As(alias)
	return instance
}

func (t *colorReferenceTable) GetColumns() []gooq.Expression {
	return []gooq.Expression{
		t.Value,
	}
}

func (t *colorReferenceTable) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.ColorReferenceTable, error) {
	result := model.ColorReferenceTable{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *colorReferenceTable) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.ColorReferenceTable, error) {
	results := []model.ColorReferenceTable{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

func (t *colorReferenceTable) ScanRowWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.ColorReferenceTable, error) {
	result := model.ColorReferenceTable{}
	if err := gooq.ScanRowWithContext(ctx, db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *colorReferenceTable) ScanRowsWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.ColorReferenceTable, error) {
	results := []model.ColorReferenceTable{}
	if err := gooq.ScanRowsWithContext(ctx, db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var ColorReferenceTable = newColorReferenceTable()

type personConstraints struct {
	NameBirthyearConstraint gooq.DatabaseConstraint
	PersonPkey              gooq.DatabaseConstraint
}

type person struct {
	gooq.TableImpl
	Asterisk  gooq.StringField
	ID        gooq.UUIDField
	Name      gooq.StringField
	Height    gooq.DecimalField
	Mass      gooq.DecimalField
	HairColor gooq.StringField
	SkinColor gooq.StringField
	EyeColor  gooq.StringField
	BirthYear gooq.IntField
	Gender    gooq.StringField
	HomeWorld gooq.StringField
	SpeciesID gooq.UUIDField
	WeaponID  gooq.UUIDField
	Status    gooq.StringField

	Constraints *personConstraints
}

func newPersonConstraints(
	instance *person,
) *personConstraints {
	constraints := &personConstraints{}
	constraints.NameBirthyearConstraint = gooq.DatabaseConstraint{
		Name: "name_birthyear_constraint",
		Columns: []gooq.Field{
			instance.Name, instance.BirthYear},
		Predicate: null.NewString("((status)::text <> 'dead'::text)", true),
	}
	constraints.PersonPkey = gooq.DatabaseConstraint{
		Name: "person_pkey",
		Columns: []gooq.Field{
			instance.ID},
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newPerson() *person {
	instance := &person{}
	instance.Initialize("public", "person")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.ID = gooq.NewUUIDField(instance, "id")
	instance.Name = gooq.NewStringField(instance, "name")
	instance.Height = gooq.NewDecimalField(instance, "height")
	instance.Mass = gooq.NewDecimalField(instance, "mass")
	instance.HairColor = gooq.NewStringField(instance, "hair_color")
	instance.SkinColor = gooq.NewStringField(instance, "skin_color")
	instance.EyeColor = gooq.NewStringField(instance, "eye_color")
	instance.BirthYear = gooq.NewIntField(instance, "birth_year")
	instance.Gender = gooq.NewStringField(instance, "gender")
	instance.HomeWorld = gooq.NewStringField(instance, "home_world")
	instance.SpeciesID = gooq.NewUUIDField(instance, "species_id")
	instance.WeaponID = gooq.NewUUIDField(instance, "weapon_id")
	instance.Status = gooq.NewStringField(instance, "status")
	instance.Constraints = newPersonConstraints(instance)
	return instance
}

func (t *person) As(alias string) *person {
	instance := newPerson()
	instance.TableImpl = *instance.TableImpl.As(alias)
	return instance
}

func (t *person) GetColumns() []gooq.Expression {
	return []gooq.Expression{
		t.ID,
		t.Name,
		t.Height,
		t.Mass,
		t.HairColor,
		t.SkinColor,
		t.EyeColor,
		t.BirthYear,
		t.Gender,
		t.HomeWorld,
		t.SpeciesID,
		t.WeaponID,
		t.Status,
	}
}

func (t *person) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Person, error) {
	result := model.Person{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *person) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Person, error) {
	results := []model.Person{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

func (t *person) ScanRowWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Person, error) {
	result := model.Person{}
	if err := gooq.ScanRowWithContext(ctx, db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *person) ScanRowsWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Person, error) {
	results := []model.Person{}
	if err := gooq.ScanRowsWithContext(ctx, db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var Person = newPerson()

type speciesConstraints struct {
	SpeciesPkey                 gooq.DatabaseConstraint
	SpeciesUniquenessConstraint gooq.DatabaseConstraint
}

type species struct {
	gooq.TableImpl
	Asterisk        gooq.StringField
	ID              gooq.UUIDField
	Name            gooq.StringField
	Classification  gooq.StringField
	AverageHeight   gooq.DecimalField
	AverageLifespan gooq.DecimalField
	HairColor       gooq.StringField
	SkinColor       gooq.StringField
	EyeColor        gooq.StringField
	HomeWorld       gooq.StringField
	Language        gooq.StringField

	Constraints *speciesConstraints
}

func newSpeciesConstraints(
	instance *species,
) *speciesConstraints {
	constraints := &speciesConstraints{}
	constraints.SpeciesPkey = gooq.DatabaseConstraint{
		Name: "species_pkey",
		Columns: []gooq.Field{
			instance.ID},
		Predicate: null.NewString("", false),
	}
	constraints.SpeciesUniquenessConstraint = gooq.DatabaseConstraint{
		Name: "species_uniqueness_constraint",
		Columns: []gooq.Field{
			instance.Name, instance.Classification},
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newSpecies() *species {
	instance := &species{}
	instance.Initialize("public", "species")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.ID = gooq.NewUUIDField(instance, "id")
	instance.Name = gooq.NewStringField(instance, "name")
	instance.Classification = gooq.NewStringField(instance, "classification")
	instance.AverageHeight = gooq.NewDecimalField(instance, "average_height")
	instance.AverageLifespan = gooq.NewDecimalField(instance, "average_lifespan")
	instance.HairColor = gooq.NewStringField(instance, "hair_color")
	instance.SkinColor = gooq.NewStringField(instance, "skin_color")
	instance.EyeColor = gooq.NewStringField(instance, "eye_color")
	instance.HomeWorld = gooq.NewStringField(instance, "home_world")
	instance.Language = gooq.NewStringField(instance, "language")
	instance.Constraints = newSpeciesConstraints(instance)
	return instance
}

func (t *species) As(alias string) *species {
	instance := newSpecies()
	instance.TableImpl = *instance.TableImpl.As(alias)
	return instance
}

func (t *species) GetColumns() []gooq.Expression {
	return []gooq.Expression{
		t.ID,
		t.Name,
		t.Classification,
		t.AverageHeight,
		t.AverageLifespan,
		t.HairColor,
		t.SkinColor,
		t.EyeColor,
		t.HomeWorld,
		t.Language,
	}
}

func (t *species) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Species, error) {
	result := model.Species{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *species) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Species, error) {
	results := []model.Species{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

func (t *species) ScanRowWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Species, error) {
	result := model.Species{}
	if err := gooq.ScanRowWithContext(ctx, db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *species) ScanRowsWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Species, error) {
	results := []model.Species{}
	if err := gooq.ScanRowsWithContext(ctx, db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var Species = newSpecies()

type weaponConstraints struct {
	WeaponPkey gooq.DatabaseConstraint
}

type weapon struct {
	gooq.TableImpl
	Asterisk gooq.StringField
	ID       gooq.UUIDField
	Damage   gooq.IntField
	Price    gooq.IntField

	Constraints *weaponConstraints
}

func newWeaponConstraints(
	instance *weapon,
) *weaponConstraints {
	constraints := &weaponConstraints{}
	constraints.WeaponPkey = gooq.DatabaseConstraint{
		Name: "weapon_pkey",
		Columns: []gooq.Field{
			instance.ID},
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newWeapon() *weapon {
	instance := &weapon{}
	instance.Initialize("public", "weapon")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.ID = gooq.NewUUIDField(instance, "id")
	instance.Damage = gooq.NewIntField(instance, "damage")
	instance.Price = gooq.NewIntField(instance, "price")
	instance.Constraints = newWeaponConstraints(instance)
	return instance
}

func (t *weapon) As(alias string) *weapon {
	instance := newWeapon()
	instance.TableImpl = *instance.TableImpl.As(alias)
	return instance
}

func (t *weapon) GetColumns() []gooq.Expression {
	return []gooq.Expression{
		t.ID,
		t.Damage,
		t.Price,
	}
}

func (t *weapon) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Weapon, error) {
	result := model.Weapon{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *weapon) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Weapon, error) {
	results := []model.Weapon{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

func (t *weapon) ScanRowWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Weapon, error) {
	result := model.Weapon{}
	if err := gooq.ScanRowWithContext(ctx, db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *weapon) ScanRowsWithContext(
	ctx context.Context, db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Weapon, error) {
	results := []model.Weapon{}
	if err := gooq.ScanRowsWithContext(ctx, db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var Weapon = newWeapon()
